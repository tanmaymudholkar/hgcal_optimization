#include<string>
#include<iostream>
#include<fstream>
#include<sstream>

#include "TFile.h"
#include "TTree.h"
#include "TH1F.h"
#include "TH2F.h"
#include "TGraph.h"
#include "TCanvas.h"
#include "TStyle.h"
#include "TString.h"
#include "TChain.h"
#include "TSystem.h"

#include "../../../../userlib/include/HGCSSEvent.hh"
#include "../../../../userlib/include/HGCSSInfo.hh"
#include "../../../../userlib/include/HGCSSRecoHit.hh"
#include "../../../../userlib/include/HGCSSSimHit.hh"
#include "../../../../userlib/include/HGCSSSamplingSection.hh"

typedef struct{
    unsigned int hitweight;//total energy of hits in the layer
    double hit_x;
    double hit_y; //hit position
}layerstat;// statistics on one layer

double weight(int layer) {
  return 1.0;
}

void convert_num_to_string(unsigned int x,char numchar[]){
  if(x>=1000) {numchar[0]='\0';}
  numchar[0]='0'+x/100;
  numchar[1]='0'+(x/10)%10;
  numchar[2]='0'+x%10;
  numchar[3]='\0';
}

void createfilename(int eventnum,char filename[]){
  // for a given event and given layernum, set the file name
  char prestring[100]="layer_vs_enengy_center_et50_eta2pt1_event";
  char eventnumchar[4];
  const char filefix[5]=".png";
  convert_num_to_string(eventnum,eventnumchar);
  strcat(prestring,eventnumchar);
  strcat(prestring,filefix);
  strcpy(filename,prestring);
}


void layer_vs_energy_center_sig_event(int eventnum,double aver_x[],double aver_y[],TChain  *lSimTree,TChain  *lRecTree, std::vector<HGCSSRecoHit> * rechitvec){
    unsigned ievt(0);
    //choode a proper event(>0,<=1000) as the data to make statistics on energy/position and etc.
    //note that if we want to sum over all 1000 events, we need a 'for' cycle.
    ievt=eventnum;
    layerstat singleevt[28];
    unsigned layernum;
    for(layernum=0;layernum<=27;layernum++){
         singleevt[layernum].hitweight={0};
         singleevt[layernum].hit_x={0};
         singleevt[layernum].hit_y={0};
    }//initializing 
    //for (unsigned ievt(0); ievt<nEvts; ++ievt){//loop on entries
    //totalE = 0;
    
    if (ievt%100==0) std::cout << " -- Processing event " << ievt << std::endl;
    lSimTree->GetEntry(ievt);
    lRecTree->GetEntry(ievt);
    
    for (unsigned iH(0); iH<(*rechitvec).size(); ++iH){//loop over rechits
      const HGCSSRecoHit lHit = (*rechitvec)[iH];
      double posx = lHit.get_x();
      double posy = lHit.get_y();
      double posz = lHit.get_z();
      unsigned layer = lHit.layer();
      double energy = weight(layer)*lHit.energy();
      singleevt[layer].hitweight+=energy;
      singleevt[layer].hit_x+=posx*energy;
      singleevt[layer].hit_y+=posy*energy;
      
      //if (layer==layernum)//choose a proper layer
      //x_y_E->Fill(posx,posy,energy);
      //endif
      //num_hit_layer->Fill(layer);
    }
    //p_E_l->Fill(totalE,layerno);
    //p_E->Fill(totalE);
    //p_E->Fill(layerno);
    //}//loop on hits
    
    //x_y_E->Draw("LEGO");//draw the diagram of TH2F x_y_E // Note: if you do not need this histogram, just delete it~ 
    //num_hit_layer->Draw("LEGO");
    //char filename[100];
    //createfilename(eventnum,layernum,filename);
    //myc->SaveAs(filename);
    //cout << "min layer = " << min_layer << std::endl;
    //cout << "max layer = " << max_layer << std::endl;
    //obtain the average hit position for each layer
    for(layernum=0;layernum<=27;layernum++){
        if(singleevt[layernum].hitweight!=0){
            aver_x[layernum]=singleevt[layernum].hit_x/singleevt[layernum].hitweight;
            aver_y[layernum]=singleevt[layernum].hit_y/singleevt[layernum].hitweight;
        }
        else aver_x[layernum]=aver_y[layernum]=0;
    }
}

void layer_vs_energy_center(){//main
      //load the shared library for HGCSS* classes
    gSystem->Load("/export/home/tmudholk/research/HGCstandalone/userlib/lib/libPFCalEEuserlib.so");  

    TChain  *lSimTree = new TChain("HGCSSTree");
    TChain  *lRecTree = new TChain("RecoTree");

    lSimTree->AddFile("/export/cmss2/paulini/CMS/HGCal/version30/HGcal_version30_model2_BOFF_et50_eta2.100.root");
    lRecTree->AddFile("/export/cmss2/paulini/CMS/HGCal/version30/Digi_version30_model2_BOFF_et50_eta2.100.root");
 
    std::vector<HGCSSSamplingSection> * ssvec = 0;
    std::vector<HGCSSSimHit> * simhitvec = 0;
    std::vector<HGCSSRecoHit> * rechitvec = 0;

    lSimTree->SetBranchAddress("HGCSSSamplingSectionVec",&ssvec);
    lSimTree->SetBranchAddress("HGCSSSimHitVec",&simhitvec);
    lRecTree->SetBranchAddress("HGCSSRecoHitVec",&rechitvec);
  
    const unsigned nEvts = lSimTree->GetEntries(); 
  int eventnum=500;
  int layernum;
  double aver_x[28];
  double aver_y[28];
  FILE *fp;
  for(eventnum=700;eventnum<=900;eventnum+=50){
     layer_vs_energy_center_sig_event(eventnum,aver_x,aver_y,lSimTree,lRecTree);
     TGraph *tg=new TGraph(28,aver_x,aver_y);
     char filename[100];
     createfilename(eventnum,filename);
     TCanvas *c1=new TCanvas("c1","AC*",200,10,600,400);
     c1->cd();
     tg->Draw("AC*");
     c1->SaveAs(filename);
  }
}
